import argparse
import MILK
from pathlib import Path
import numpy as np
import pandas as pd
import sys
import os
from prettytable import PrettyTable
import shutil


class get_arguments():
    def __init__(self):
        # Parse interface arguments
        welcome = "Commandline maud esg loader for 2D and multigeometry x-ray diffraction."
        parser = argparse.ArgumentParser(description=welcome)
        parser.add_argument("-i","--interface", choices=["command","csv"],required=True,
                            help="Choose interface to specify files.")
        arg = parser.parse_args(sys.argv[1:3])
        self.interface = arg.interface
        parser = getattr(self,self.interface)()
        opts = parser.parse_args(sys.argv[3:])
        opts.cwd = Path(opts.maud_output_par).parent
        opts.omegas, opts.esg_files, opts.poni_files, opts.maud_detectors = self.parse_opts(opts)
        for key,val in opts.__dict__.items():
            setattr(self,key,val)

    
    def csv(self):
        parser = argparse.ArgumentParser(description="csv interface to esg loader.")
        parser.add_argument("--maud-input-par", type=str, required=True,
                            help="Input MAUD parameter file containing appropriate detector objects")
        parser.add_argument("--import-csv", type=str,required=True,
                            help="Import csv reads a list of esg_files, poni, and maud_detectors names from a csv file")
        parser.add_argument("--maud-detectors", required=False,
                            default=None, help=argparse.SUPPRESS)
        parser.add_argument("--esg-files", default=None, required=False,
                            help=argparse.SUPPRESS)
        parser.add_argument("--poni-files", default=None, required=False,
                            help=argparse.SUPPRESS)
        parser = self._shared(parser)
        return parser
    
    def command(self):
        parser = argparse.ArgumentParser(description="Command-line interface to esg loader.")
        parser.add_argument("--maud-input-par", type=str, required=True,
                            help="Input MAUD parameter file containing appropriate detector objects")
        parser.add_argument("--maud-detectors", nargs="+", required=True,
                            help="Detector names in MAUD parameter file. len(maud_detectors)=len(esg_files)")
        parser.add_argument("--esg-files", type=str, nargs="+", required=True,
                            help="esg format file names. Must be in subfolder of work directory. len(maud_detectors)=len(esg_files)=len(poni_files)")
        parser.add_argument("--import-csv", type=str, default=None,
                            help=argparse.SUPPRESS)
        parser.add_argument("--poni-files", type=str, nargs="+", default=None,
                            help="pyFAI PONI format detector files. len(maud_detectors)=len(esg_files)=len(poni_files) ")
        parser = self._shared(parser)
        return parser
    
    def _shared(self,parser):
        parser.add_argument("--maud-output-par", type=str, default="Analysis.par",
                            help="Output MAUD parameter file which will have the data imported")
        parser.add_argument("--omega-do-update", action='store_true',
                            help="Starting omega measurement angle (i.e. sample stage rotation) for autogenerated angles.")
        parser.add_argument("--omega-start", type=float, default=0.0,
                            help="Starting omega measurement angle (i.e. sample stage rotation) for autogenerated angles.")
        parser.add_argument("--omega-step", type=float, default=0.0,
                            help="Step in omega measurement angle (i.e. sample stage rotation) for autogenerated angles.")
        parser.add_argument("--maud-run-import", action='store_true',
                            help="If specified the import will be run using the MILK batch interface.")
        parser.add_argument("--maud-load-script",
                            type=str, default="load_data.ins", help=argparse.SUPPRESS)
        parser.add_argument("--maud-batch-script",
                            type=str, default="batch.ins", help=argparse.SUPPRESS)
        return parser
    
    def parse_opts(self,opts):
        if 'csv' in self.interface:
            print(f"Importing file lists from {opts.import_csv}")
            df = pd.read_csv(opts.import_csv)
            omegas = df.omegas
            esg_files = df.esg_files
            poni_files = df.poni_files
            maud_detectors = df.maud_detectors
        else:
            print("Generating file lists")
            if opts.poni_files is None:
                opts.poni_files = [None]*len(opts.maud_detectors)
            else:
                assert len(opts.poni_files) == len(
                    opts.maud_detectors), "A different number of poni and maud_detectors were specified"
            omegas = []
            esg_files = []
            poni_files = []
            maud_detectors = []
            for esg_file_str, poni_file, maud_detector in zip(opts.esg_files, opts.poni_files, opts.maud_detectors):
                files = sorted([str(p) for p in Path().rglob(esg_file_str)])
                if all(["_azim_" in file for file in files]):
                    files.sort(key=lambda x: float(
                        x.split('_azim_')[-1].replace('.esg', '')))
                omegas_tmp = build_omega(
                    len(files), opts.omega_start, opts.omega_step)
                for file, omega_tmp in zip(files, omegas_tmp):
                    omegas.append(omega_tmp)
                    esg_files.append(file)
                    poni_files.append(poni_file)
                    maud_detectors.append(maud_detector)
        print("importing file list omega, esg_file,poni_file,maud_detector")
        x = PrettyTable()
        x.add_column("omegas", omegas)
        x.add_column("poni_files", poni_files)
        x.add_column("maud_detectors", maud_detectors)
        x.add_column("esg_files", esg_files)
        print(x)
        return omegas, esg_files, poni_files, maud_detectors

class Poni(object):
    """ Class that stores calibration settings for a single detector.
    """

    def __init__(self, poni_file):
        self.load_poni(poni_file)

    def load_poni(self, file):
        with open(file) as fp:
            poni_lines = fp.readlines()
        poni_lines = poni_lines[-9:]
        for line in poni_lines:
            try:
                name, value = line.split(":")
            except ValueError:
                continue
            if name == "PixelSize1":
                self.pixel1 = float(value)
            elif name == "PixelSize2":
                self.pixel2 = float(value)
            elif name == "Distance":
                self.distance = float(value)
            elif name == "Poni1":
                self.poni1 = float(value)
            elif name == "Poni2":
                self.poni2 = float(value)
            elif name == "Rot1":
                self.rot1 = float(value)
            elif name == "Rot2":
                self.rot2 = float(value)
            elif name == "Rot3":
                self.rot3 = float(value)
            elif name == "Wavelength":
                self.wavelength = float(value)

    def update_poni_in_par(self, detector, maud_par):

        editor = MILK.parameterEditor.editor()
        editor.ifile = maud_par
        editor.ofile = maud_par
        editor.run_dirs = ""
        editor.wild = [0]
        editor.wild_range = [[]]
        editor.read_par()
        editor.get_val(key="_inst_angular_calibration",
                       sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        if editor.value == []:
            print(
                f"The detector named {detector} is not an inclined reflection image detector. PONI could not be set.")
            return
        editor.set_val(key="_image_original_dist_spec/detc",
                       value=f"{self.distance*1000.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_image_original_center_x",
                       value=f"{self.poni2*1000.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_image_original_center_y",
                       value=f"{self.poni1*1000.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_image_original_detc_2theta",
                       value=f"{np.rad2deg(-self.rot2)}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_image_original_detc_phiDA",
                       value=f"{np.rad2deg(self.rot1)}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_image_original_detc_omegaDN",
                       value=f"{0.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_image_original_detc_etaDA",
                       value=f"{np.rad2deg(self.rot3)}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)

        editor.set_val(key="_pd_instr_dist_spec/detc",
                       value=f"{self.distance*1000.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_inst_ang_calibration_center_x",
                       value=f"{0.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_inst_ang_calibration_center_y",
                       value=f"{0.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_inst_ang_calibration_detc_2theta",
                       value=f"{np.rad2deg(-self.rot2)}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_inst_ang_calibration_detc_phiDA",
                       value=f"{np.rad2deg(self.rot1)}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_inst_ang_calibration_detc_omegaDN",
                       value=f"{0.0}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_inst_ang_calibration_detc_etaDA",
                       value=f"{np.rad2deg(self.rot3)}", sobj=f"{detector} Inclined&Reflection&Image", use_stored_par=True)
        editor.set_val(key="_diffrn_radiation_wavelength",
                       value=f"{self.wavelength*1e10}", sobj=detector, use_stored_par=True)
        editor.set_val(key="_diffrn_radiation_wavelength_wt",
                       value="1.0", sobj=detector, use_stored_par=True)
        editor.write_par()


def build_omega(n_files, omega_start, omega_step):
    return [omega_start+n*omega_step for n in range(0, n_files)]


def update_omega_in_esg(esg_file, omega):
    """Update the esg file inplace to contain the omega measurement angle."""
    "Note it is assumed the first omega reference is the only reference! Done avoid reading large files"
    keyval = bytes(f"_pd_meas_angle_omega {float(omega):.6}\n", 'utf-8')
    with open(esg_file, 'rb+') as f1:
        for line in f1:
            if b'_pd_meas_angle_omega' in line:
                f1.seek(idx)
                f1.write(keyval)
                break
            idx = f1.tell()


def update_script(script, command):
    script.append(command)
    return script


def write_script(script, filename):
    with open(filename, 'w') as f:
        for line in script:
            f.write(f"{line}\n")


def write_maud_batch_script(maud_batch_script, maud_output_par, maud_load_script, cwd):
    script = ["_maud_working_directory",
              f"'{cwd}{os.sep}'",
              "",
              "loop_",
              "_riet_analysis_file",
              "_riet_analysis_iteration_number",
              "_maud_remove_all_datafiles",
              "_riet_meas_datains_name",
              "",
              f"'{Path(maud_output_par)}' 0 'true' '{maud_load_script}'"]
    write_script(script, cwd / maud_batch_script)


def main():
    """Import esg data into MAUD"""
    opts = get_arguments()

    # Build data load script and write
    data_load_script = ["loop_", "_pd_meas_dataset_id",
                        "_riet_meas_datafile_name", ""]
    for esg_file, maud_detector in zip(opts.esg_files, opts.maud_detectors):
        data_load_script = update_script(
            data_load_script, f"'{maud_detector}' '.{os.sep}{Path(esg_file).relative_to(opts.cwd)}'")


    write_script(data_load_script, opts.cwd / opts.maud_load_script)

    # Write batch script
    write_maud_batch_script(opts.maud_batch_script,
                            Path(opts.maud_output_par).name, opts.maud_load_script, opts.cwd.absolute())

    # Update omega
    if opts.omega_do_update:
        for omega, esg_file in zip(opts.omegas, opts.esg_files):
            update_omega_in_esg(esg_file, omega)

    # Copy input MAUD file to target file
    shutil.copyfile(opts.maud_input_par, opts.maud_output_par)

    # Update MAUD file with poni
    for poni_file, maud_detector in zip(opts.poni_files, opts.maud_detectors):
        if poni_file is not None:
            poni = Poni(poni_file)
            poni.update_poni_in_par(
                maud_detector, opts.maud_output_par)

    # Run import using MILK
    if opts.maud_run_import:
        MILK.MAUDText.callMaudText.run_MAUD(
            os.getenv('MAUD_PATH').strip("'"),
            "mx8G",
            'False',
            None,
            str(opts.cwd.absolute() / opts.maud_batch_script)
        )

if __name__ == "__main__":
    main()
