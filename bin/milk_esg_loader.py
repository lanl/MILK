import argparse
from MILK.bin.esg_loader import main,build_omega
from pathlib import Path
import numpy as np
import pandas as pd
import sys
from prettytable import PrettyTable


class get_arguments():
    def __init__(self):
        # Parse interface arguments
        welcome = "Commandline maud esg loader for 2D and multigeometry x-ray diffraction."
        parser = argparse.ArgumentParser(description=welcome)
        parser.add_argument("-i","--interface", choices=["command","csv"],required=True,
                            help="Choose interface to specify files.")
        arg = parser.parse_args(sys.argv[1:3])
        self.interface = arg.interface
        parser = getattr(self,self.interface)()
        opts = parser.parse_args(sys.argv[3:])
        opts.output = Path(opts.maud_output_par).parent
        opts.omegas, opts.esg_files, opts.poni_files, opts.maud_detectors = self.parse_opts(opts)
        
        # remove omegas to be compatible with the python interface
        if not opts.omega_do_update:
            opts.omegas=None

        # Move to class attributes
        for key,val in opts.__dict__.items():
            setattr(self,key,val)

    
    def csv(self):
        parser = argparse.ArgumentParser(description="csv interface to esg loader.")
        parser.add_argument("--maud-input-par", type=str, required=True,
                            help="Input MAUD parameter file containing appropriate detector objects")
        parser.add_argument("--import-csv", type=str,required=True,
                            help="Import csv reads a list of esg_files, poni, and maud_detectors names from a csv file")
        parser.add_argument("--maud-detectors", required=False,
                            default=None, help=argparse.SUPPRESS)
        parser.add_argument("--esg-files", default=None, required=False,
                            help=argparse.SUPPRESS)
        parser.add_argument("--poni-files", default=None, required=False,
                            help=argparse.SUPPRESS)
        parser = self._shared(parser)
        return parser
    
    def command(self):
        parser = argparse.ArgumentParser(description="Command-line interface to esg loader.")
        parser.add_argument("--maud-input-par", type=str, required=True,
                            help="Input MAUD parameter file containing appropriate detector objects")
        parser.add_argument("--maud-detectors", nargs="+", required=True,
                            help="Detector names in MAUD parameter file. len(maud_detectors)=len(esg_files)")
        parser.add_argument("--esg-files", type=str, nargs="+", required=True,
                            help="esg format file names. Must be in subfolder of work directory. len(maud_detectors)=len(esg_files)=len(poni_files)")
        parser.add_argument("--import-csv", type=str, default=None,
                            help=argparse.SUPPRESS)
        parser.add_argument("--poni-files", type=str, nargs="+", default=None,
                            help="pyFAI PONI format detector files. len(maud_detectors)=len(esg_files)=len(poni_files) ")
        parser = self._shared(parser)
        return parser
    
    def _shared(self,parser):
        parser.add_argument("--maud-output-par", type=str, default="Analysis.par",
                            help="Output MAUD parameter file which will have the data imported")
        parser.add_argument("--omega-do-update", action='store_true',
                            help="Starting omega measurement angle (i.e. sample stage rotation) for autogenerated angles.")
        parser.add_argument("--omega-start", type=float, default=0.0,
                            help="Starting omega measurement angle (i.e. sample stage rotation) for autogenerated angles.")
        parser.add_argument("--omega-step", type=float, default=0.0,
                            help="Step in omega measurement angle (i.e. sample stage rotation) for autogenerated angles.")
        parser.add_argument("--maud-run-import", action='store_true',
                            help="If specified the import will be run using the MILK batch interface.")
        parser.add_argument("--maud-load-script",
                            type=str, default="load_data.ins", help=argparse.SUPPRESS)
        parser.add_argument("--maud-batch-script",
                            type=str, default="batch.ins", help=argparse.SUPPRESS)
        return parser
    
    def parse_opts(self,opts):
        if 'csv' in self.interface:
            print(f"Importing file lists from {opts.import_csv}")
            df = pd.read_csv(opts.import_csv)
            omegas = df.omegas
            esg_files = df.esg_files
            poni_files = df.poni_files
            maud_detectors = df.maud_detectors
        else:
            print("Generating file lists")
            if opts.poni_files is None:
                opts.poni_files = [None]*len(opts.maud_detectors)
            else:
                assert len(opts.poni_files) == len(
                    opts.maud_detectors), "A different number of poni and maud_detectors were specified"
            omegas = []
            esg_files = []
            poni_files = []
            maud_detectors = []
            for esg_file_str, poni_file, maud_detector in zip(opts.esg_files, opts.poni_files, opts.maud_detectors):
                files = sorted([str(p) for p in Path().rglob(esg_file_str)])
                if all(["_azim_" in file for file in files]):
                    files.sort(key=lambda x: float(
                        x.split('_azim_')[-1].replace('.esg', '')))
                omegas_tmp = build_omega(
                    len(files), opts.omega_start, opts.omega_step)
                for file, omega_tmp in zip(files, omegas_tmp):
                    omegas.append(omega_tmp)
                    esg_files.append(file)
                    poni_files.append(poni_file)
                    maud_detectors.append(maud_detector)
        print("importing file list omega, esg_file,poni_file,maud_detector")
        x = PrettyTable()
        x.add_column("omegas", omegas)
        x.add_column("poni_files", poni_files)
        x.add_column("maud_detectors", maud_detectors)
        x.add_column("esg_files", esg_files)
        print(x)
        return omegas, esg_files, poni_files, maud_detectors

def entry_point():
    """Entry point for milk_integration commandline call."""
    opts = get_arguments()
    main(esg_files=opts.esg_files,
         maud_detectors=opts.maud_detectors,
         maud_input_par=opts.maud_input_par,
         maud_output_par=opts.maud_output_par,
         poni_files=opts.poni_files,
         omega=opts.omegas,
         output=opts.output,
         maud_batch_script=opts.maud_batch_script,
         maud_load_script=opts.maud_load_script,
         maud_run_import=opts.maud_run_import
         )